{
  "name": "nlq-to-sql",
  "displayName": "NLQ-to-SQL",
  "publisher": "SpencerMoffat",
  "description": "Convert Natural Language Queries to SQL using LLM APIs",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.83.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "nlq-to-sql.generateSql",
        "title": "NLQ-to-SQL: Generate SQL w/ AI",
        "when": "editorHasSelection"
      },
      {
        "command": "nlq-to-sql.addDatabase",
        "title": "NLQ-to-SQL: Add Database",
        "icon": "$(add)"
      },
      {
        "command": "nlq-to-sql.removeDatabase",
        "title": "Remove Database",
        "icon": "$(trash)"
      },
      {
        "command": "nlq-to-sql.refreshDatabaseExplorer",
        "title": "Refresh",
        "icon": "$(extensions-refresh)"
      },
      {
        "command": "nlq-to-sql.refreshActiveTableContext",
        "title": "Refresh",
        "icon": "$(extensions-refresh)"
      },
      {
        "command": "nlq-to-sql.refreshQueryHistory",
        "title": "Refresh",
        "icon": "$(extensions-refresh)"
      },
      {
        "command": "nlq-to-sql.selectTableContext",
        "title": "Select Table Context",
        "icon": "$(star)"
      },
      {
        "command": "nlq-to-sql.addTablesToContext",
        "title": "Add Tables to Context",
        "icon": "$(add)"
      },
      {
        "command": "nlq-to-sql.addTableContext",
        "title": "NLQ-to-SQL: Add Table Context",
        "icon": "$(add)"
      },
      {
        "command": "nlq-to-sql.removeTableContext",
        "title": "Remove Table Context",
        "icon": "$(trash)"
      },
      {
        "command": "nlq-to-sql.insertQuery",
        "title": "Insert Query",
        "icon": "$(insert)"
      },
      {
        "command": "nlq-to-sql.copyQuery",
        "title": "Copy Query to Clipboard",
        "icon": "$(clippy)"
      },
      {
        "command": "nlq-to-sql.removeQueryFromHistory",
        "title": "Remove Query",
        "icon": "$(trash)"
      },
      {
        "command": "nlq-to-sql.clearQueryHistory",
        "title": "NLQ-to-SQL: Clear Query History",
        "icon": "$(clear-all)"
      }
    ],
    "configuration": [
      {
        "title": "NLQ-to-SQL",
        "properties": {
          "nlq-to-sql.apiKey": {
            "markdownDescription": "OpenAI API Key. Create an account and get an API key [here](https://platform.openai.com/account/api-keys). You will be billed according to their pricing and policies.",
            "type": "string",
            "default": "",
            "order": 1
          },
          "nlq-to-sql.modelId": {
            "markdownDescription": "OpenAI Model ID compatible with the `/chat/completions` endpoint (see their [docs](https://platform.openai.com/docs/models/model-endpoint-compatibility)). Format like \"gpt-3.5-turbo\" or \"gpt-4-32k\".",
            "type": "string",
            "default": "gpt-3.5-turbo",
            "order": 2
          },
          "nlq-to-sql.excludedDirectories": {
            "description": "Directories to skip when searching for database files in the workspace.",
            "type": "array",
            "default": [
              ".git",
              ".vscode",
              ".idea",
              "bower_components",
              "node_modules",
              "build",
              "out",
              "dist",
              "bin",
              "tmp",
              ".DS_Store",
              "coverage",
              "results",
              "logs",
              "test"
            ],
            "order": 3
          }
        }
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "nlq-to-sql",
          "title": "NLQ-to-SQL",
          "icon": "$(database)"
        }
      ]
    },
    "views": {
      "nlq-to-sql": [
        {
          "id": "nlq-to-sql.activeTableContext",
          "name": "Active Table Context"
        },
        {
          "id": "nlq-to-sql.databaseExplorer",
          "name": "Database Explorer"
        },
        {
          "id": "nlq-to-sql.queryHistory",
          "name": "Generated SQL"
        }
      ]
    },
    "menus": {
      "commandPalette": [
        {
          "command": "nlq-to-sql.removeDatabase",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.selectTableContext",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.refreshActiveTableContext",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.refreshDatabaseExplorer",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.refreshQueryHistory",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.addTablesToContext",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.removeTableContext",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.removeQueryFromHistory",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.insertQuery",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.copyQuery",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.addTableContext",
          "when": "false"
        }
      ],
      "view/title": [
        {
          "command": "nlq-to-sql.addDatabase",
          "when": "view == nlq-to-sql.databaseExplorer",
          "group": "navigation@0"
        },
        {
          "command": "nlq-to-sql.refreshDatabaseExplorer",
          "when": "view == nlq-to-sql.databaseExplorer",
          "group": "navigation@1"
        },
        {
          "command": "nlq-to-sql.refreshActiveTableContext",
          "when": "view == nlq-to-sql.activeTableContext",
          "group": "navigation@1"
        },
        {
          "command": "nlq-to-sql.clearQueryHistory",
          "when": "view == nlq-to-sql.queryHistory",
          "group": "navigation@0"
        },
        {
          "command": "nlq-to-sql.refreshQueryHistory",
          "when": "view == nlq-to-sql.queryHistory",
          "group": "navigation@1"
        }
      ],
      "view/item/context": [
        {
          "command": "nlq-to-sql.removeDatabase",
          "when": "view == nlq-to-sql.databaseExplorer && viewItem == databaseInfo",
          "group": "inline"
        },
        {
          "command": "nlq-to-sql.selectTableContext",
          "when": "view == nlq-to-sql.databaseExplorer && viewItem == tableContext",
          "group": "inline"
        },
        {
          "command": "nlq-to-sql.addTablesToContext",
          "when": "view == nlq-to-sql.databaseExplorer && viewItem == tableContext",
          "group": "inline"
        },
        {
          "command": "nlq-to-sql.addTableContext",
          "when": "view == nlq-to-sql.databaseExplorer && viewItem == contextsFolder",
          "group": "inline"
        },
        {
          "command": "nlq-to-sql.removeTableContext",
          "when": "view == nlq-to-sql.databaseExplorer && viewItem == tableContext",
          "group": "inline"
        },
        {
          "command": "nlq-to-sql.removeQueryFromHistory",
          "when": "view == nlq-to-sql.queryHistory && viewItem == queryInfo",
          "group": "inline@0"
        },
        {
          "command": "nlq-to-sql.copyQuery",
          "when": "view == nlq-to-sql.queryHistory && viewItem == queryInfo",
          "group": "inline@1"
        },
        {
          "command": "nlq-to-sql.insertQuery",
          "when": "view == nlq-to-sql.queryHistory && viewItem == queryInfo",
          "group": "inline@2"
        }
      ]
    },
    "walkthroughs": [
      {
        "id": "nlq-to-sql.getStarted",
        "title": "Get Started with NLQ-to-SQL",
        "description": "Configure the extension and a database context to convert English questions into SQL with AI.",
        "steps": [
          {
            "id": "configureApiKeyWalkthroughStep",
            "title": "Configure OpenAI API Key",
            "description": "[Get an API key from OpenAI](https://platform.openai.com/account/api-keys) and select a [compatible model](https://platform.openai.com/docs/models/model-endpoint-compatibility) (for ``/chat/completions``).\nYou will be billed according to their pricing and policies.\n[Open NLQ-to-SQL Settings](command:toSide:workbench.action.openSettings?%22nlq-to-sql.%22)",
            "media": {
              "image": {
                "dark": "media/openAi_logo.jpg",
                "hc": "media/openAi_logo.jpg",
                "light": "media/openAi_logo.jpg",
                "hcLight": "media/openAi_logo.jpg"
              },
              "altText": "OpenAI logo"
            },
            "completionEvents": [
              "onSettingChanged:nlq-to-sql.modelId",
              "onSettingsChanged:nlq-to-sql.apiKey"
            ]
          },
          {
            "id": "addDatabaseWalkthroughStep",
            "title": "Add a database",
            "description": "The command below lets you provide information about a database to use as context in SQL generation.\nAfter you run the command and select a reference database, you'll be asked to paste in CREATE statements.\n Run this query first to get the proper input: ``SELECT * FROM sqlite_master WHERE type='table';``\n**Currently only the demonstrated SQLite format to the right is supported.**\nSubsections of these CREATE statements are used in requests to OpenAI, so only provide what you're comfortable sharing with them.\n[Add a database](command:nlq-to-sql.addDatabase)",
            "media": {
              "markdown": "walkthroughs/schemaDemo.md"
            },
            "completionEvents": [
              "onCommand:nlq-to-sql.addDatabase"
            ]
          },
          {
            "id": "treeViewOverviewWalkthroughStep",
            "title": "Views",
            "description": "The NLQ-to-SQL sidebar makes it easy to control what database info is used to generate SQL.\nOnly table schemas in the **Active Table Context** will be used as context and sent to OpenAI.\n[Open sidebar](command:workbench.view.extension.nlq-to-sql)",
            "media": {
              "image": {
                "dark": "media/tree_view_demo.png",
                "hc": "media/tree_view_demo.png",
                "light": "media/tree_view_demo.png",
                "hcLight": "media/tree_view_demo.png"
              },
              "altText": "OpenAI logo"
            },
            "completionEvents": [
              "onView:nlq-to-sql.activeTableContext"
            ]
          },
          {
            "id": "generateSqlWalkthroughStep",
            "title": "Generate SQL",
            "description": "Ask a question and have it answered with AI-generated SQL. This is designed specifically to generate SELECT statements.\n[Generate SQL](command:nlq-to-sql.generateSql)",
            "media": {
              "markdown": "walkthroughs/generateSqlExample.md"
            },
            "completionEvents": [
              "onCommand:nlq-to-sql.generateSql"
            ]
          }
        ]
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@types/uuid": "^9.0.6",
    "@types/vscode": "^1.83.0",
    "@typescript-eslint/eslint-plugin": "^6.4.1",
    "@typescript-eslint/parser": "^6.4.1",
    "@vscode/test-electron": "^2.3.4",
    "eslint": "^8.47.0",
    "glob": "^10.3.3",
    "mocha": "^10.2.0",
    "ts-loader": "^9.5.0",
    "typescript": "^5.2.2",
    "webpack": "^5.88.2",
    "webpack-cli": "^5.1.4"
  },
  "dependencies": {
    "@types/vscode-webview": "^1.57.4",
    "@vscode/webview-ui-toolkit": "^1.2.2",
    "better-sqlite3": "^9.0.0",
    "node-sql-parser": "^4.11.0",
    "openai": "^4.12.3",
    "sqlite": "^5.0.1",
    "sqlite-parser": "^1.0.1",
    "uuid": "^9.0.1"
  }
}
