{
  "name": "nlq-to-sql",
  "displayName": "NLQ-to-SQL: AI-Generated SQL from Natural Language Queries",
  "publisher": "smophat7",
  "description": "Convert Natural Language Queries to SQL using OpenAI's LLM APIs",
  "version": "0.1.0",
  "engines": {
    "vscode": "^1.83.0"
  },
  "categories": [
    "Data Science",
    "Other"
  ],
  "keywords": [
    "ai",
    "sql",
    "nlq",
    "openai",
    "code completion",
    "code generation"
  ],
  "icon": "media/icon-color-500x500.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/smophat7/nlq-sql-vscode.git"
  },
  "bugs": {
    "url": "https://github.com/smophat7/nlq-sql-vscode/issues"
  },
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "nlq-to-sql.generateSql",
        "title": "NLQ-to-SQL: Generate SQL w/ AI",
        "when": "editorHasSelection"
      },
      {
        "command": "nlq-to-sql.setApiKey",
        "title": "NLQ-to-SQL: Set API Key"
      },
      {
        "command": "nlq-to-sql.addDatabase",
        "title": "NLQ-to-SQL: Add Database",
        "icon": "$(add)"
      },
      {
        "command": "nlq-to-sql.removeDatabase",
        "title": "Remove Database",
        "icon": "$(trash)"
      },
      {
        "command": "nlq-to-sql.refreshDatabaseExplorer",
        "title": "Refresh",
        "icon": "$(extensions-refresh)"
      },
      {
        "command": "nlq-to-sql.refreshActiveTableContext",
        "title": "Refresh",
        "icon": "$(extensions-refresh)"
      },
      {
        "command": "nlq-to-sql.refreshQueryHistory",
        "title": "Refresh",
        "icon": "$(extensions-refresh)"
      },
      {
        "command": "nlq-to-sql.selectTableContext",
        "title": "Set as Active Table Context",
        "icon": "$(star)"
      },
      {
        "command": "nlq-to-sql.addTablesToContext",
        "title": "Add Tables to Context",
        "icon": "$(add)"
      },
      {
        "command": "nlq-to-sql.addTableContext",
        "title": "NLQ-to-SQL: Add Table Context",
        "icon": "$(add)"
      },
      {
        "command": "nlq-to-sql.removeTableContext",
        "title": "Remove Table Context",
        "icon": "$(trash)"
      },
      {
        "command": "nlq-to-sql.insertQuery",
        "title": "Insert Query",
        "icon": "$(insert)"
      },
      {
        "command": "nlq-to-sql.copyQuery",
        "title": "Copy Query to Clipboard",
        "icon": "$(clippy)"
      },
      {
        "command": "nlq-to-sql.removeQueryFromHistory",
        "title": "Remove Query",
        "icon": "$(trash)"
      },
      {
        "command": "nlq-to-sql.clearQueryHistory",
        "title": "NLQ-to-SQL: Clear Query History",
        "icon": "$(clear-all)"
      }
    ],
    "configuration": [
      {
        "title": "NLQ-to-SQL",
        "properties": {
          "nlq-to-sql.modelId": {
            "markdownDescription": "OpenAI Model ID compatible with the `/chat/completions` endpoint (see their [docs](https://platform.openai.com/docs/models/model-endpoint-compatibility)). Format like \"gpt-3.5-turbo\" or \"gpt-4-32k\".",
            "type": "string",
            "default": "gpt-3.5-turbo",
            "order": 1
          },
          "nlq-to-sql.maxTokens": {
            "description": "Maximum number of tokens to generate in a single completion. The total length of input tokens and generated tokens is limited by the model's context length. If left blank here, it will be left blank in the API request and use OpenAI's defaults.",
            "type": [
              "number",
              "null"
            ],
            "default": null,
            "order": 2
          },
          "nlq-to-sql.temperature": {
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If left blank here, it will be left blank in the API request and use OpenAI's defaults.",
            "type": [
              "number",
              "null"
            ],
            "default": null,
            "order": 3
          }
        }
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "nlq-to-sql",
          "title": "NLQ-to-SQL",
          "icon": "media/icon-bw-24x24.svg"
        }
      ]
    },
    "views": {
      "nlq-to-sql": [
        {
          "id": "nlq-to-sql.activeTableContext",
          "name": "Active Table Context"
        },
        {
          "id": "nlq-to-sql.databaseExplorer",
          "name": "Database Explorer"
        },
        {
          "id": "nlq-to-sql.queryHistory",
          "name": "Generated SQL"
        }
      ]
    },
    "menus": {
      "commandPalette": [
        {
          "command": "nlq-to-sql.removeDatabase",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.selectTableContext",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.refreshActiveTableContext",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.refreshDatabaseExplorer",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.refreshQueryHistory",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.addTablesToContext",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.removeTableContext",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.removeQueryFromHistory",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.insertQuery",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.copyQuery",
          "when": "false"
        },
        {
          "command": "nlq-to-sql.addTableContext",
          "when": "false"
        }
      ],
      "view/title": [
        {
          "command": "nlq-to-sql.addDatabase",
          "when": "view == nlq-to-sql.databaseExplorer",
          "group": "navigation@0"
        },
        {
          "command": "nlq-to-sql.refreshDatabaseExplorer",
          "when": "view == nlq-to-sql.databaseExplorer",
          "group": "navigation@1"
        },
        {
          "command": "nlq-to-sql.refreshActiveTableContext",
          "when": "view == nlq-to-sql.activeTableContext",
          "group": "navigation@1"
        },
        {
          "command": "nlq-to-sql.clearQueryHistory",
          "when": "view == nlq-to-sql.queryHistory",
          "group": "navigation@0"
        },
        {
          "command": "nlq-to-sql.refreshQueryHistory",
          "when": "view == nlq-to-sql.queryHistory",
          "group": "navigation@1"
        }
      ],
      "view/item/context": [
        {
          "command": "nlq-to-sql.removeDatabase",
          "when": "view == nlq-to-sql.databaseExplorer && viewItem == databaseInfo",
          "group": "inline"
        },
        {
          "command": "nlq-to-sql.selectTableContext",
          "when": "view == nlq-to-sql.databaseExplorer && viewItem == tableContext",
          "group": "inline"
        },
        {
          "command": "nlq-to-sql.addTablesToContext",
          "when": "view == nlq-to-sql.databaseExplorer && viewItem == tableContext",
          "group": "inline"
        },
        {
          "command": "nlq-to-sql.addTableContext",
          "when": "view == nlq-to-sql.databaseExplorer && viewItem == contextsFolder",
          "group": "inline"
        },
        {
          "command": "nlq-to-sql.removeTableContext",
          "when": "view == nlq-to-sql.databaseExplorer && viewItem == tableContext",
          "group": "inline"
        },
        {
          "command": "nlq-to-sql.removeQueryFromHistory",
          "when": "view == nlq-to-sql.queryHistory && viewItem == queryInfo",
          "group": "inline@0"
        },
        {
          "command": "nlq-to-sql.copyQuery",
          "when": "view == nlq-to-sql.queryHistory && viewItem == queryInfo",
          "group": "inline@1"
        },
        {
          "command": "nlq-to-sql.insertQuery",
          "when": "view == nlq-to-sql.queryHistory && viewItem == queryInfo",
          "group": "inline@2"
        }
      ]
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@types/uuid": "^9.0.6",
    "@types/vscode": "^1.83.0",
    "@typescript-eslint/eslint-plugin": "^6.4.1",
    "@typescript-eslint/parser": "^6.4.1",
    "@vscode/test-electron": "^2.3.4",
    "eslint": "^8.47.0",
    "glob": "^10.3.3",
    "mocha": "^10.2.0",
    "ts-loader": "^9.5.0",
    "typescript": "^5.2.2",
    "webpack": "^5.88.2",
    "webpack-cli": "^5.1.4"
  },
  "dependencies": {
    "@types/vscode-webview": "^1.57.4",
    "@vscode/webview-ui-toolkit": "^1.2.2",
    "better-sqlite3": "^9.0.0",
    "node-sql-parser": "^4.11.0",
    "openai": "^4.12.3",
    "sqlite": "^5.0.1",
    "sqlite-parser": "^1.0.1",
    "uuid": "^9.0.1"
  }
}
